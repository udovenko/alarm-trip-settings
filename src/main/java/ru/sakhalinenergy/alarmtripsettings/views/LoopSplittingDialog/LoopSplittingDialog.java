package ru.sakhalinenergy.alarmtripsettings.views.LoopSplittingDialog;

import java.util.List;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import ru.sakhalinenergy.alarmtripsettings.events.CustomEvent;
import ru.sakhalinenergy.alarmtripsettings.events.Events;
import ru.sakhalinenergy.alarmtripsettings.Main;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import ru.sakhalinenergy.alarmtripsettings.models.entity.Loop;
import ru.sakhalinenergy.alarmtripsettings.models.entity.Tag;


/**
 * Класс реализует дилог для разделения петли на два набора тагов.
 * 
 * @author Denis.Udovenko
 * @version 1.0.2 
 */
public class LoopSplittingDialog extends javax.swing.JDialog 
{
    public Events events = new Events();
    private final Loop model;
        
    
    /**
     * Конструктор диалога. Инициализирует все основные компоненты.
     */
    public LoopSplittingDialog(Loop model) 
    {
        this.model = model;
        
        initComponents();
        
        //Делаем диалог модальным:
        this.setModal(true);
        
        //Устанавливаем иконку диалога:
        ImageIcon img = Main.splitLoopIcon;
        this.setIconImage(img.getImage());
    }//LoopSplitingDialog
    
    
    /**
     * Метод устанавливает модель (экземпляр петли) текущего диалога и 
     * отрисовывает соответвующие списки тагов.
     * 
     * @param   loop  Экземпляр петли
     * @return  void
     */
    public void render()
    {
        this.loopNameBeingSplittingLabel.setText(model.toString());
        this.tagsTree.setCellRenderer(new TagsTreeNodeRenderer());
        this.tagsTree.setCellEditor(new TagsTreeNodeEditor(this.tagsTree));
        this.tagsTree.setEditable(true);
        
        //Получаем модель дерева и корневой узел:
        DefaultTreeModel treeModel = (DefaultTreeModel)this.tagsTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)treeModel.getRoot();
        
        // Build tree:
        TagsTreeOperator.buildTree(root, model);
                
        // Reload tree:
        treeModel.reload(root);
        
        //Раскрываем все узлы дерева:
        for (int i = 0; i < this.tagsTree.getRowCount(); i++)
        {
            this.tagsTree.expandRow(i);
        }//for
    }//setLoop

    
    /**
     * Метод возвращает список выбранных в дереве тагов, которые необходимо
     * вынести в отдельную копию петли.
     * 
     * @return 
     */
    private List<Tag> _getSelectedTags()
    {
        List<Tag> result = new ArrayList();
        
        DefaultMutableTreeNode sourceNode;
        DefaultMutableTreeNode tagNode;
        Object tagNodeUserObject;
        TagNodeModel checkboxTagNode;
                
        //Получаем модель дерева и корневой узел:
        DefaultTreeModel treeModel = (DefaultTreeModel)tagsTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)treeModel.getRoot();
        
        for (int rootNodeIndex = 0; rootNodeIndex < root.getChildCount(); rootNodeIndex++)
        {
            sourceNode = (DefaultMutableTreeNode)root.getChildAt(rootNodeIndex);
                                    
            for (int checkboxNodeIndex = 0; checkboxNodeIndex < sourceNode.getChildCount(); checkboxNodeIndex++)
            {
                tagNode = (DefaultMutableTreeNode)sourceNode.getChildAt(checkboxNodeIndex);
                tagNodeUserObject = tagNode.getUserObject();
                
                if (tagNodeUserObject.getClass() == TagNodeModel.class)
                {
                    checkboxTagNode = (TagNodeModel)tagNodeUserObject;
                    if (checkboxTagNode.selected) result.add(checkboxTagNode.getTag());
                }// if
            }// for
        }// for
        
        return result;
    }//getSelectedTags
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loopNameBeingSplittingLabelCaption = new javax.swing.JLabel();
        loopNameBeingSplittingLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagsTree = new javax.swing.JTree();
        tagsTreeLabel = new javax.swing.JLabel();
        runSplittingButton = new javax.swing.JButton();

        setTitle("Splitting selected loop");

        loopNameBeingSplittingLabelCaption.setText("Splitting loop:");

        loopNameBeingSplittingLabel.setText("loop name");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tagsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tagsTree.setEditable(true);
        tagsTree.setRootVisible(false);
        tagsTree.setShowsRootHandles(true);
        jScrollPane1.setViewportView(tagsTree);

        tagsTreeLabel.setText("Select tags you want move to seperate part of loop:");

        runSplittingButton.setText("Split");
        runSplittingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSplittingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tagsTreeLabel)
                        .addGap(0, 179, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loopNameBeingSplittingLabelCaption)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loopNameBeingSplittingLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runSplittingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loopNameBeingSplittingLabelCaption)
                    .addComponent(loopNameBeingSplittingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tagsTreeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runSplittingButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * Метод обрабатывает нажатие кнопки "Split" запуска процесса разделения
     * петли на два набора тагов и рассылает все подписчикам событие нажатия
     * кнопки.
     * 
     * @param evt Событие нажатия кнопки
     */
    private void runSplittingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSplittingButtonActionPerformed
        
        CustomEvent runSplittingButtonClickEvent = new CustomEvent(_getSelectedTags());
        this.events.trigger(ViewEvent.RUN_SPLITTING_BUTTON_CLICK, runSplittingButtonClickEvent);    
    }//GEN-LAST:event_runSplittingButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel loopNameBeingSplittingLabel;
    private javax.swing.JLabel loopNameBeingSplittingLabelCaption;
    private javax.swing.JButton runSplittingButton;
    private javax.swing.JTree tagsTree;
    private javax.swing.JLabel tagsTreeLabel;
    // End of variables declaration//GEN-END:variables
}//LoopSplitingDialog
