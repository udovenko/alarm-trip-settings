package ru.sakhalinenergy.alarmtripsettings.views.dialog.progress;

import java.util.HashMap;
import ru.sakhalinenergy.alarmtripsettings.events.CustomEvent;
import ru.sakhalinenergy.alarmtripsettings.events.CustomEventListener;
import ru.sakhalinenergy.alarmtripsettings.models.ModelObservable;


/**
 * Класс реализует диалог для отображения статуса выполнения процесса с двумя
 * прогресс-барами и текстовым полем для вывода сообщений нити.
 * 
 * @author   Denis.Udovenko
 * @version  1.0.1
 */
public class TwoProgressBarsWithLogDialog extends ProgressDialog
{
    private final Enum logEvent;    

    
    /**
     * Конструктор диалога. Инициализирует все компоненты лога.
     */
    public TwoProgressBarsWithLogDialog(ModelObservable model, Enum progressEvent, Enum logEvent) 
    {
        super(model, progressEvent);
        this.logEvent = logEvent;
        model.on(this.progressEvent, new _ProgressEventHandler()); 
        model.on(this.logEvent, new _LogEventHandler());
        
        initComponents();
    }//TwoLinesProgressBarDialog
    
    
    /**
     * Internal class - handler for a model progress event.
     * 
     * @author Denis Udovenko
     * @version 1.0.2
     */
    protected class _ProgressEventHandler implements CustomEventListener
    {
        @Override
        public void customEventOccurred(CustomEvent evt)
        {
            HashMap<Enum, Object> progressInfo = (HashMap)evt.getSource();
            
            // Set outer progress bar caption:
            outerProgressBarCurrentActionLabel.setText((String)progressInfo.get(ModelObservable.ProgressInfoKey.OUTER_CYCLE_CAPTION));
            
            // Set outer progress bar percentage:
            int outerProgress = (Integer)progressInfo.get(ModelObservable.ProgressInfoKey.OUTER_CYCLE_PERCENTAGE);
            outerProgressBar.setValue(outerProgress);
            outerProgressBarPercentageLabel.setText(outerProgress + "%");
            
            // Set inner progress bar caption:
            innerProgressBarCurrentActionLabel.setText((String)progressInfo.get(ModelObservable.ProgressInfoKey.INNER_CYCLE_CAPTION));
            
            // Set inner progress bar percentage:
            int innerProgress = (Integer)progressInfo.get(ModelObservable.ProgressInfoKey.INNER_CYCLE_PERCENTAGE);
            innerProgressBar.setValue(innerProgress);
            innerProgressBarPercentageLabel.setText(innerProgress + "%");;
        }// customEventOccurred
    }// _ProgressEventHandler
    
    
    /**
     * Internal class - handler for a model progress event.
     * 
     * @author Denis Udovenko
     * @version 1.0.1
     */
    protected class _LogEventHandler implements CustomEventListener
    {
        @Override
        public void customEventOccurred(CustomEvent event)
        {
            Object[] exceptionWrapper = (Object[])event.getSource();
            String comment = (String)exceptionWrapper[0];
            Exception exception = (Exception)exceptionWrapper[1];
            logTextArea.append(comment + ": " + exception + "\n");
        }// customEventOccurred
    }// _LogEventHandler
    
    
    /**
     * Returns log text.
     *
     * @return Log text
     */
    public String getLog()
    {
        return logTextArea.getText();
    }//getLog
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outerProgressBarCurrentActionLabel = new javax.swing.JLabel();
        outerProgressBar = new javax.swing.JProgressBar();
        innerProgressBarCurrentActionLabel = new javax.swing.JLabel();
        innerProgressBar = new javax.swing.JProgressBar();
        outerProgressBarPercentageLabel = new javax.swing.JLabel();
        innerProgressBarPercentageLabel = new javax.swing.JLabel();
        logTextAreaScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setResizable(false);

        outerProgressBarCurrentActionLabel.setText("Global action");

        innerProgressBarCurrentActionLabel.setText("Local action");

        outerProgressBarPercentageLabel.setText("0%");

        innerProgressBarPercentageLabel.setText("0%");

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logTextArea.setWrapStyleWord(true);
        logTextAreaScrollPane.setViewportView(logTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logTextAreaScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(outerProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                            .addComponent(outerProgressBarCurrentActionLabel)
                            .addComponent(innerProgressBarCurrentActionLabel)
                            .addComponent(innerProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(innerProgressBarPercentageLabel)
                            .addComponent(outerProgressBarPercentageLabel))
                        .addGap(0, 21, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outerProgressBarCurrentActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outerProgressBarPercentageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(innerProgressBarCurrentActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(innerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(innerProgressBarPercentageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logTextAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar innerProgressBar;
    private javax.swing.JLabel innerProgressBarCurrentActionLabel;
    private javax.swing.JLabel innerProgressBarPercentageLabel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JScrollPane logTextAreaScrollPane;
    private javax.swing.JProgressBar outerProgressBar;
    private javax.swing.JLabel outerProgressBarCurrentActionLabel;
    private javax.swing.JLabel outerProgressBarPercentageLabel;
    // End of variables declaration//GEN-END:variables
}
