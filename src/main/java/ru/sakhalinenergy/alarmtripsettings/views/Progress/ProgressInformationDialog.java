package ru.sakhalinenergy.alarmtripsettings.views.Progress;

import java.util.HashMap;
import ru.sakhalinenergy.alarmtripsettings.events.CustomEvent;
import ru.sakhalinenergy.alarmtripsettings.events.CustomEventListener;
import ru.sakhalinenergy.alarmtripsettings.models.ModelObservable;


/**
 * Implements dialog for process visualization with text message.
 * 
 * @author Denis Udovenko
 * @version 1.0.2
 */
public class ProgressInformationDialog  extends ProgressDialog
{

    /**
     * Public constructor.
     * 
     * @param model Model instance which progress events will be processed
     * @param progressEvent Model progress event key
     */
    public ProgressInformationDialog(ModelObservable model, Enum progressEvent)
    {
        super(model, progressEvent);
        model.on(this.progressEvent, new _ProgressEventHandler());
        
        initComponents();
    }//ProgressInformationForm
       
    
     /**
     * Internal class - handler for a model progress event.
     * 
     * @author Denis Udovenko
     * @version 1.0.1
     */
    protected class _ProgressEventHandler implements CustomEventListener
    {
        @Override
        public void customEventOccurred(CustomEvent evt)
        {
            HashMap<Enum, Object> progress = (HashMap)evt.getSource();
            loadingProgressMessageLabel.setText((String)progress.get(ModelObservable.ProgressInfoKey.CYCLE_CAPTION));
        }// customEventOccurred
    }// _ProgressEventHandler
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadingProgressMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Operation progress");
        setAlwaysOnTop(true);
        setResizable(false);

        loadingProgressMessageLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        loadingProgressMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingProgressMessageLabel.setText("Loading settings");
        loadingProgressMessageLabel.setMaximumSize(new java.awt.Dimension(1000, 17));
        loadingProgressMessageLabel.setMinimumSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadingProgressMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadingProgressMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel loadingProgressMessageLabel;
    // End of variables declaration//GEN-END:variables
}
